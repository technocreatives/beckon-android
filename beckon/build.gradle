apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'de.mannodermaus.android-junit5'

group='com.github.technocreatives.beckon-android'

android {
    compileSdkVersion 31

    defaultConfig {
        minSdkVersion 26
        targetSdkVersion 31
        buildToolsVersion = "30.0.2"
        versionCode 1

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        warningsAsErrors true
        abortOnError true // Fail early.

        disable "UnusedResources"              // Unused will be removed on release
        disable "IconExpectedSize"             // Using the material icons provided from Google
        disable "GoogleAppIndexingApiWarning"  // We might want to index our app later
        disable "InvalidPackage"               // Butterknife, Okio and Realm
        disable "ResourceType"                 // Annotation binding
        disable "GradleDependency"
        disable "NewerVersionAvailable"
    }

    compileOptions {
        targetCompatibility '1.8'
        sourceCompatibility '1.8'
    }

    testOptions {
        junitPlatform {
            filters {
                engines {
                    include 'spek2'
                }
            }
            jacocoOptions {
                // here goes all jacoco config, for example
                html.enabled = true
                xml.enabled = false
                csv.enabled = false
                unitTests.all {
                    testLogging.events = ["passed", "skipped", "failed"]
                }
            }
        }
    }
    compileOptions {
        targetCompatibility '1.8'
        sourceCompatibility '1.8'
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
    buildToolsVersion '30.0.2'
}

configurations {
    ktlint
}

dependencies {

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    // Android x
    api 'androidx.core:core-ktx:1.6.0-beta02'
    api 'androidx.annotation:annotation:1.3.0-alpha01'

    // Bluetooth
    api "no.nordicsemi.android.support.v18:scanner:$nsScannerVersion"
    api "no.nordicsemi.android:ble:$nsBleVersion"
    api "no.nordicsemi.android:dfu:$nsDfuVersion"

    // Code quality tools
    ktlint "com.pinterest:ktlint:$ktlint_version"

    implementation "com.jakewharton.timber:timber:$timber"
    implementation "com.squareup.moshi:moshi:$moshi"
    kapt("com.squareup.moshi:moshi-kotlin-codegen:$moshi")
    implementation "com.github.lenguyenthanh:simpleredux:28844b4b43"

    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.0")

    // Arrows
    implementation(platform("io.arrow-kt:arrow-stack:$arrow_version"))
    implementation("io.arrow-kt:arrow-core")
    implementation("io.arrow-kt:arrow-fx-coroutines")

    // Spek
    testImplementation "org.spekframework.spek2:spek-dsl-jvm:$spek_version"
    testImplementation "org.spekframework.spek2:spek-runner-junit5:$spek_version"
    // Spek requires kotlin-reflect, omit when already in classpath
    testImplementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    testImplementation 'org.mockito:mockito-core:3.11.0'
    testImplementation 'com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0'
    testImplementation 'org.assertj:assertj-core:3.19.0'
    testImplementation "io.strikt:strikt-core:0.31.0"

    testImplementation ("io.kotest:kotest-runner-junit5:5.0.0.M3")
    testImplementation ("io.kotest:kotest-assertions-core:5.0.0.M3")
}

//task ktlint(type: JavaExec, group: "verification") {
//    description = "Check Kotlin code style."
//    classpath = configurations.ktlint
//    main = "com.pinterest.ktlint.Main"
//    args "src/**/*.kt"
//    // to generate report in checkstyle format prepend following args:
//    // "--reporter=plain", "--reporter=checkstyle,output=${buildDir}/ktlint.xml"
//    // see https://github.com/shyiko/ktlint#usage for more
//}
//check.dependsOn ktlint
//
//task ktlintFormat(type: JavaExec, group: "formatting") {
//    description = "Fix Kotlin code style deviations."
//    classpath = configurations.ktlint
//    main = "com.pinterest.ktlint.Main"
//    args "-F", "src/**/*.kt"
//}

afterEvaluate {
    publishing {
        publications {
            core(MavenPublication) {
                from components.release
                groupId = findProperty("GROUP")
                artifactId = 'beckon'
                version = findProperty("VERSION_NAME")
                artifact(sourceJar)
            }
        }
    }
}

task sourceJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier "sources"
}